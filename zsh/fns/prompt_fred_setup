#!/bin/zsh
# fred prompt theme

prompt_fred_help () {
  cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

  prompt fred [<color1> [<color2> [<color3>]]]

where the colors are for the user@host background, current working
directory, and current working directory if the prompt is split over
two lines respectively.  The default colors are blue, cyan and green.
This theme works best with a dark background.

Recommended fonts for this theme: nexus or vga or similar.  If you
don't have any of these, then specify the `plain' option to use 7-bit
replacements for the 8-bit characters.

And you probably thought fred was overkill.
EOF
}

export GIT_AUTHOR_NAME="Frederic Jean"
export GIT_AUTHOR_EMAIL="frederic.jean@sun.com"
export GIT_COMMITTER_NAME="Frederic Jean"
export GIT_COMMITTER_EMAIL="frederic.jean@sun.com"

# ----------------------------------------------------------------------
# various git scripts

gitize() {
        git init \
        && git add . \
        && git commit -a -m"initial commit" \
        && git gc
}

# ----------------------------------------------------------------------
# The following implements a caching mechanism for git information.
# The RPROMPT executes get_git_bprompt_info() and include the output...
#
#   setopt prompt_subst
#   RPROMPT="$(get_git_prompt_info)"
#
export __ZSH_GIT_DIR=
export __ZSH_GIT_BRANCH=
export __ZSH_GIT_STATE=
export __ZSH_GIT_VARS_INVALID=1

# get the name of the branch we are on
parse_git_branch() {
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) -- /'
}

# http://blog.madism.org/index.php/2008/05/07/173-git-prompt
new_parse_git_branch() {
    local git_dir branch

    psvar=()
    git_dir=$(git rev-parse --git-dir 2> /dev/null) || return
    if test -d "$git_dir/../.dotest"; then
        if test -f "$git_dir/../.dotest/rebasing"; then
            __ZSH_GIT_STATE="rebase"
        elif test -f "$git_dir/../.dotest/applying"; then
            __ZSH_GIT_STATE="am"
        else
            __ZSH_GIT_STATE="am/rebase"
        fi
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    elif test -f "$git_dir/.dotest-merge/interactive"; then
        __ZSH_GIT_STATE="rebase -i"
        branch="$(cat "$git_dir/.dotest-merge/head-name")"
    elif test -d "$git_dir/.dotest-merge"; then
        __ZSH_GIT_STATE="rebase -m"
        branch="$(cat "$git_dir/.dotest-merge/head-name")"
    elif test -f "$git_dir/MERGE_HEAD"; then
        __ZSH_GIT_STATE="merge"
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        test -f "$git_dir/BISECT_LOG" && __ZSH_GIT_STATE="bisect"
        branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
            branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
            branch="$(cut -c1-7 "$git_dir/HEAD")..."
    fi

    __ZSH_GIT_FULL_DIR=${git_dir}
    __ZSH_GIT_DIR="${__ZSH_GIT_FULL_DIR/$HOME/~}"
    __ZSH_GIT_BRANCH="${branch#refs/heads/}"

    export __ZSH_GIT_FULL_DIR
    export __ZSH_GIT_DIR
    export __ZSH_GIT_BRANCH
    export __ZSH_GIT_STATE
    export __ZSH_GIT_VARS_INVALID=
}


zsh_git_invalidate_vars() {
        export __ZSH_GIT_VARS_INVALID=1
}
zsh_git_compute_vars() {
        new_parse_git_branch
}

# on each chdir update the cached git variable(s)
preexec_functions+='zsh_git_preexec_update_vars'
chpwd_functions+='zsh_git_chpwd_update_vars'
#precmd_functions+='zsh_git_precmd_update_vars'

zsh_git_chpwd_update_vars() {
        zsh_git_invalidate_vars
}
zsh_git_preexec_update_vars() {
        case "$(history $HISTCMD)" in 
                *git*) zsh_git_invalidate_vars ;;
        esac
}

# this function returns the current git branch
# it takes as argument a string with printf like arguments:
#   '%P'     path to top of repository
#   '%p'     path to top of repository, with s/$HOME/~/
#   '%b'     current branch
#   '%s'     state of rebase/merge/bisect/am
#   '%%'     a '%' character
# providing no arguments is equivalent to "%p %b %s".
get_git_prompt_info() {
        test -n "$__ZSH_GIT_VARS_INVALID" && zsh_git_compute_vars
        test -n "$__ZSH_GIT_DIR" || return

        local def fmt res
        def='%p %b %s'
        fmt=$@
        res=${fmt:-$def}
        res=${res//\%P/$__ZSH_GIT_FULL_DIR }
        res=${res//\%p/$__ZSH_GIT_DIR }
        res=${res//\%b/$__ZSH_GIT_BRANCH }
        test -n "$__ZSH_GIT_STATE" && \
                res=${res//\%s/$__ZSH_GIT_STATE }
        res=${res//\%%/%}
        
        echo -n "${res}"
}

prompt_fred_setup () {
  prompt_fred_color1=${1:-'blue'}
  prompt_fred_color2=${2:-'cyan'}
  prompt_fred_color3=${3:-'green'}

  base_prompt="%{$bg_no_bold[$prompt_fred_color1]%}%n@%m%{$reset_color%} "
  post_prompt="%{$reset_color%}"

  base_prompt_no_color=$(echo "$base_prompt" | perl -pe "s/%{.*?%}//g")
  post_prompt_no_color=$(echo "$post_prompt" | perl -pe "s/%{.*?%}//g")

  precmd  () { prompt_fred_precmd }
  preexec () { }
}

prompt_fred_precmd () {
  setopt noxtrace localoptions
  local base_prompt_expanded_no_color base_prompt_etc
  local prompt_length space_left
  local git_prompt git_branch git_status

  base_prompt_expanded_no_color=$(print -P "$base_prompt_no_color")
  base_prompt_etc=$(print -P "$base_prompt%(4~|...|)%3~")
  prompt_length=${#base_prompt_etc}
  git_branch=$(get_git_prompt_info '%b')
  git_status=$(get_git_prompt_info '%s')
  if [[ ${#git_branch} -gt 0 ]]; then
      git_prompt=" ${git_branch}"
  fi
  if [[ $prompt_length -lt 40 ]]; then
    path_prompt="%{$fg_bold[$prompt_fred_color2]%}%(4~|...|)%3~%{$fg_bold[white]%}$git_prompt"
  else
    space_left=$(( $COLUMNS - $#base_prompt_expanded_no_color - 2 ))
    path_prompt="%{$fg_bold[$prompt_fred_color3]%}%${space_left}<...<%~%{$fg_bold[white]%}$git_prompt$prompt_newline"
  fi
  PS1="$base_prompt$path_prompt %# $post_prompt"
  PS2="$base_prompt$path_prompt %_> $post_prompt"
  PS3="$base_prompt$path_prompt ?# $post_prompt"
}

prompt_fred_setup "$@"
